generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profile       Json?     @db.Json
  tokens        Json?     @db.Json
  calendarId    String?
  enabled       Boolean   @default(true)
  subscription  Json?     @db.Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  userLocations UserLocation[]
  userSlots     UserSlot[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model LocationWithSpots {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  spots         Json[]
  userLocations UserLocation[]

  @@map("locationsWithSpots")
}

model UserLocation {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  userId       String            @db.ObjectId
  locationId   String            @db.ObjectId
  locationName String
  enabled      Boolean           @default(true)
  spots        Json[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  location     LocationWithSpots @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@map("userLocations")
}


model UserSlot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  summary     String
  description String
  start       String   // Changed to String to store ISO date strings
  end         String   // Changed to String to store ISO date strings
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userSlots")
}
