// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  email                 String         @unique
  name                  String?
  image                 String?
  emailVerified        DateTime?
  profile               Json?          // Stores Google profile data
  tokens               Json?          // Stores Google OAuth tokens
  calendarId           String?        // Google Calendar ID
  enabled              Boolean        @default(true)
  subscription         Json?          // Stripe subscription data
  userLocations        UserLocation[]
  accounts             Account[]
  sessions             Session[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Location {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userLocations UserLocation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model UserLocation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String    @db.ObjectId
  location     Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId   String    @db.ObjectId
  locationName String    // Denormalized for quick access
  enabled      Boolean   @default(true)
  spots        UserSpot[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId])
  @@index([locationId])
}

model UserSpot {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userLocation    UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)
  userLocationId  String       @db.ObjectId
  name            String       // Denormalized spot name
  spotId          String       // External spot ID
  enabled         Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userLocationId])
  @@index([spotId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}