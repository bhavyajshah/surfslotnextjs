generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model LocationWithSpots {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  spots Spot[]

  @@map("surfslot.locationsWithSpots")
}

type Spot {
  name String
  id   String
}

model UserLocation {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  locationId   String
  locationName String
  enabled      Boolean    @default(true)
  spots        UserSpot[]
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("surfslot.userLocations")
}

model UserSpot {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userLocationId String       @db.ObjectId
  spotId         String
  name           String
  enabled        Boolean      @default(true)
  userLocation   UserLocation @relation(fields: [userLocationId], references: [id], onDelete: Cascade)

  @@map("surfslot.userSpots")
}

model UserSlot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  summary     String
  description String
  start       DateTime
  end         DateTime
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("surfslot.userSlots")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  locations     UserLocation[]
  slots         UserSlot[]

  @@map("surfslot.users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("surfslot.accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("surfslot.sessions")
}